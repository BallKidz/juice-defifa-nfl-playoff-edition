{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "CANT_MINT_MANUALLY",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INSUFFICIENT_AMOUNT",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INSUFFICIENT_RESERVES",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_PRICE_SORT_ORDER",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_QUANTITY",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_TIER",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MANUAL_MINTING_NOT_ALLOWED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MAX_TIERS_EXCEEDED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NO_QUANTITY",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OUT",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "PRICING_RESOLVER_CHANGES_LOCKED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RESERVED_RATE_NOT_ALLOWED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TIER_LOCKED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TIER_REMOVED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VOTING_UNITS_NOT_ALLOWED",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nft",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          }
        ],
        "name": "CleanTiers",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "baseUriOf",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "cleanTiers",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "contractUriOf",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "defaultReservedTokenBeneficiaryOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "encodedIPFSUriOf",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "encodedTierIPFSUriOf",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "firstOwnerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "flagsOf",
        "outputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "lockReservedTokenChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockVotingUnitChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockManualMintingChanges",
                "type": "bool"
              }
            ],
            "internalType": "struct JBTiered721Flags",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "isTierRemoved",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "maxTierIdOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "numberOfBurnedFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "numberOfReservedTokensOutstandingFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "numberOfReservesMintedFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "uint80",
                "name": "contributionFloor",
                "type": "uint80"
              },
              {
                "internalType": "uint48",
                "name": "lockedUntil",
                "type": "uint48"
              },
              {
                "internalType": "uint40",
                "name": "initialQuantity",
                "type": "uint40"
              },
              {
                "internalType": "uint16",
                "name": "votingUnits",
                "type": "uint16"
              },
              {
                "internalType": "uint16",
                "name": "reservedRate",
                "type": "uint16"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "shouldUseBeneficiaryAsDefault",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "transfersPausable",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721TierParams[]",
            "name": "_tiersToAdd",
            "type": "tuple[]"
          }
        ],
        "name": "recordAddTiers",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tierIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_tokenIds",
            "type": "uint256[]"
          }
        ],
        "name": "recordBurn",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "lockReservedTokenChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockVotingUnitChanges",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "lockManualMintingChanges",
                "type": "bool"
              }
            ],
            "internalType": "struct JBTiered721Flags",
            "name": "_flags",
            "type": "tuple"
          }
        ],
        "name": "recordFlags",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          },
          {
            "internalType": "uint16[]",
            "name": "_tierIds",
            "type": "uint16[]"
          },
          {
            "internalType": "bool",
            "name": "_isManualMint",
            "type": "bool"
          }
        ],
        "name": "recordMint",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256",
            "name": "leftoverAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "recordMintBestAvailableTier",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tierId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "leftoverAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_count",
            "type": "uint256"
          }
        ],
        "name": "recordMintReservesFor",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_tierIds",
            "type": "uint256[]"
          }
        ],
        "name": "recordRemoveTierIds",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "recordSetBaseUri",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "recordSetContractUri",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_beneficiary",
            "type": "address"
          }
        ],
        "name": "recordSetDefaultReservedTokenBeneficiary",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "recordSetFirstOwnerOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IJBTokenUriResolver",
            "name": "_resolver",
            "type": "address"
          }
        ],
        "name": "recordSetTokenUriResolver",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "recordTransferForTier",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "_tokenIds",
            "type": "uint256[]"
          }
        ],
        "name": "redemptionWeightOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "weight",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "reservedTokenBeneficiaryOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "tier",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "transfersPausable",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "tierBalanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tierIdOfToken",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tierOfTokenId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "transfersPausable",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "tierVotingUnitsOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_startingId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_size",
            "type": "uint256"
          }
        ],
        "name": "tiers",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "allowManualMint",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "transfersPausable",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721Tier[]",
            "name": "_tiers",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "tokenUriResolverOf",
        "outputs": [
          {
            "internalType": "contract IJBTokenUriResolver",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "totalRedemptionWeight",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "weight",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "supply",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          }
        ],
        "name": "votingUnitsOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "units",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Adheres to - IJBTiered721DelegateStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.",
      "kind": "dev",
      "methods": {
        "balanceOf(address,address)": {
          "params": {
            "_nft": "The NFT to get a balance from.",
            "_owner": "The address to check the balance of."
          },
          "returns": {
            "balance": "The number of tokens owners by the owner across all tiers."
          }
        },
        "cleanTiers(address)": {
          "params": {
            "_nft": "The NFT contract to clean tiers for."
          }
        },
        "encodedTierIPFSUriOf(address,uint256)": {
          "params": {
            "_nft": "The NFT contract to which the encoded IPFS URI belongs.",
            "_tokenId": "the ID of the token."
          },
          "returns": {
            "_0": "The encoded IPFS URI."
          }
        },
        "flagsOf(address)": {
          "params": {
            "_nft": "The NFT for which the flags apply."
          },
          "returns": {
            "_0": "The flags."
          }
        },
        "isTierRemoved(address,uint256)": {
          "params": {
            "_nft": "The NFT for which the removed tier is queried",
            "_tierId": "The tier ID"
          },
          "returns": {
            "_0": "True if the tier has been removed"
          }
        },
        "numberOfReservedTokensOutstandingFor(address,uint256)": {
          "params": {
            "_nft": "The NFT to get a number of reserved tokens outstanding.",
            "_tierId": "The ID of the tier to get a number of reserved tokens outstanding."
          },
          "returns": {
            "_0": "The outstanding number of reserved tokens within the tier."
          }
        },
        "recordAddTiers((uint80,uint48,uint40,uint16,uint16,address,bytes32,bool,bool,bool)[])": {
          "params": {
            "_tiersToAdd": "The tiers to add."
          },
          "returns": {
            "tierIds": "The IDs of the tiers added."
          }
        },
        "recordBurn(uint256[])": {
          "params": {
            "_tokenIds": "The IDs of the tokens burned."
          }
        },
        "recordFlags((bool,bool,bool))": {
          "params": {
            "_flags": "The flag to sets."
          }
        },
        "recordMint(uint256,uint16[],bool)": {
          "params": {
            "_amount": "The amount to base the mints on. All mints' price floors must fit in this amount.",
            "_isManualMint": "A flag indicating if the mint is being made manually by the NFT's owner.",
            "_tierIds": "The IDs of the tier to mint from."
          },
          "returns": {
            "leftoverAmount": "The amount leftover after the mint.",
            "tokenIds": "The IDs of the tokens minted."
          }
        },
        "recordMintBestAvailableTier(uint256)": {
          "params": {
            "_amount": "The amount to base the mint on."
          },
          "returns": {
            "leftoverAmount": "The amount leftover after the mint. ",
            "tierId": "The ID of the tier minted from.",
            "tokenId": "The token ID minted."
          }
        },
        "recordMintReservesFor(uint256,uint256)": {
          "details": "Only a project owner can mint tokens.",
          "params": {
            "_count": "The number of reserved tokens to mint. ",
            "_tierId": "The ID of the tier to mint within."
          },
          "returns": {
            "tokenIds": "The IDs of the tokens being minted as reserves."
          }
        },
        "recordRemoveTierIds(uint256[])": {
          "params": {
            "_tierIds": "The tiers IDs to remove."
          }
        },
        "recordSetBaseUri(string)": {
          "params": {
            "_uri": "The base URI to set."
          }
        },
        "recordSetContractUri(string)": {
          "params": {
            "_uri": "The contract URI to set."
          }
        },
        "recordSetDefaultReservedTokenBeneficiary(address)": {
          "params": {
            "_beneficiary": "The reserved token beneficiary."
          }
        },
        "recordSetFirstOwnerOf(uint256,address)": {
          "params": {
            "_owner": "The owner to set as the first owner.",
            "_tokenId": "The ID of the token having the first owner set."
          }
        },
        "recordSetTokenUriResolver(address)": {
          "params": {
            "_resolver": "The resolver to set."
          }
        },
        "recordTransferForTier(uint256,address,address)": {
          "params": {
            "_from": "The sender of the token.",
            "_tierId": "The ID the tier being transferred.",
            "_to": "The recipient of the token."
          }
        },
        "redemptionWeightOf(address,uint256[])": {
          "params": {
            "_nft": "The NFT for which the redemption weight is being calculated.",
            "_tokenIds": "The IDs of the tokens to get the cumulative redemption weight of."
          },
          "returns": {
            "weight": "The weight."
          }
        },
        "reservedTokenBeneficiaryOf(address,uint256)": {
          "params": {
            "_nft": "The NFT to get the reserved token beneficiary within.",
            "_tierId": "The ID of the tier to get a reserved token beneficiary of."
          },
          "returns": {
            "_0": "The reserved token beneficiary."
          }
        },
        "tier(address,uint256)": {
          "params": {
            "_id": "The ID of the tier to get. ",
            "_nft": "The NFT to get a tier within."
          },
          "returns": {
            "_0": "The tier."
          }
        },
        "tierIdOfToken(uint256)": {
          "details": "Tier's are 1 indexed from the `tiers` array, meaning the 0th element of the array is tier 1.",
          "params": {
            "_tokenId": "The ID of the token to get the tier number of. "
          },
          "returns": {
            "_0": "The tier number of the specified token ID."
          }
        },
        "tierOfTokenId(address,uint256)": {
          "params": {
            "_nft": "The NFT to get a tier within.",
            "_tokenId": "The ID of token to return the tier of. "
          },
          "returns": {
            "_0": "The tier."
          }
        },
        "tierVotingUnitsOf(address,address,uint256)": {
          "params": {
            "_account": "The account to get voting units for.",
            "_nft": "The NFT to get voting units within.",
            "_tierId": "The ID of the tier to get voting units for."
          },
          "returns": {
            "_0": "The voting units for the account."
          }
        },
        "tiers(address,uint256,uint256)": {
          "params": {
            "_nft": "The NFT contract to get tiers for.",
            "_size": "The number of tiers to include.",
            "_startingId": "The start index of the array of tiers sorted by contribution floor. Send 0 to start at the beginning."
          },
          "returns": {
            "_tiers": "All the tiers."
          }
        },
        "totalRedemptionWeight(address)": {
          "params": {
            "_nft": "The NFT for which the redemption weight is being calculated."
          },
          "returns": {
            "weight": "The total weight."
          }
        },
        "totalSupply(address)": {
          "params": {
            "_nft": "The NFT to get a total supply of."
          },
          "returns": {
            "supply": "The total number of NFTs between all tiers."
          }
        },
        "votingUnitsOf(address,address)": {
          "params": {
            "_account": "The account to get voting units for.",
            "_nft": "The NFT to get voting units within."
          },
          "returns": {
            "units": "The voting units for the account."
          }
        }
      },
      "stateVariables": {
        "_tierIdAfter": {
          "details": "If empty, assume the next index should come after.  _nft The NFT contract to get tier order index from. _index The index to get a tier after relative to."
        },
        "_trackedLastSortTierIdOf": {
          "details": "If not set, it is assumed the `maxTierIdOf` is the last sorted. _nft The NFT contract to which the tier belongs."
        },
        "maxTierIdOf": {
          "details": "This may not include the last tier ID if it has been removed. _nft The NFT contract to get the number of tiers."
        }
      },
      "title": "JBTiered721DelegateStore",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "balanceOf(address,address)": {
          "notice": " The total number of tokens owned by the given owner. "
        },
        "baseUriOf(address)": {
          "notice": "The common base for the tokenUri's _nft The NFT for which the base URI applies."
        },
        "cleanTiers(address)": {
          "notice": "Removes removed tiers from sequencing."
        },
        "contractUriOf(address)": {
          "notice": "Contract metadata uri. _nft The NFT for which the contract URI resolver applies."
        },
        "defaultReservedTokenBeneficiaryOf(address)": {
          "notice": "The beneficiary of reserved tokens when the tier doesn't specify a beneficiary. _nft The NFT contract to which the reserved token beneficiary applies."
        },
        "encodedIPFSUriOf(address,uint256)": {
          "notice": "When using this contract to manage token uri's, those are stored as 32bytes, based on IPFS hashes stripped down. _nft The NFT contract to which the encoded upfs uri belongs. _tierId the ID of the tier"
        },
        "encodedTierIPFSUriOf(address,uint256)": {
          "notice": "Resolves the encoded tier IPFS URI of the tier for the given token."
        },
        "firstOwnerOf(address,uint256)": {
          "notice": "The first owner of each token ID, stored on first transfer out. _nft The NFT contract to which the token belongs. _tokenId The ID of the token to get the stored first owner of."
        },
        "flagsOf(address)": {
          "notice": "Flags that influence the behavior of each NFT."
        },
        "isTierRemoved(address,uint256)": {
          "notice": "Tier removed from the current tiering"
        },
        "maxTierIdOf(address)": {
          "notice": "The biggest tier ID used. "
        },
        "numberOfBurnedFor(address,uint256)": {
          "notice": " The number of tokens that have been burned for each tier.  _nft The NFT contract to which the burned data belong. _tierId The ID of the tier to get a burned token count for."
        },
        "numberOfReservedTokensOutstandingFor(address,uint256)": {
          "notice": "The number of reserved tokens that can currently be minted within the tier. "
        },
        "numberOfReservesMintedFor(address,uint256)": {
          "notice": " The number of reserved tokens that have been minted for each tier.  _nft The NFT contract to which the reserve data belong. _tierId The ID of the tier to get a minted reserved token count for."
        },
        "recordAddTiers((uint80,uint48,uint40,uint16,uint16,address,bytes32,bool,bool,bool)[])": {
          "notice": "Adds tiers. "
        },
        "recordBurn(uint256[])": {
          "notice": "Records burned tokens."
        },
        "recordFlags((bool,bool,bool))": {
          "notice": "Sets flags. "
        },
        "recordMint(uint256,uint16[],bool)": {
          "notice": "Mints a token in all provided tiers."
        },
        "recordMintBestAvailableTier(uint256)": {
          "notice": "Mints a token in the best available tier."
        },
        "recordMintReservesFor(uint256,uint256)": {
          "notice": "Mint a token within the tier for the provided value."
        },
        "recordRemoveTierIds(uint256[])": {
          "notice": "Remove tiers. "
        },
        "recordSetBaseUri(string)": {
          "notice": "Sets the base URI. "
        },
        "recordSetContractUri(string)": {
          "notice": "Sets the contract URI. "
        },
        "recordSetDefaultReservedTokenBeneficiary(address)": {
          "notice": "Sets the reserved token beneficiary."
        },
        "recordSetFirstOwnerOf(uint256,address)": {
          "notice": "Sets the first owner of a token."
        },
        "recordSetTokenUriResolver(address)": {
          "notice": "Sets the token URI resolver. "
        },
        "recordTransferForTier(uint256,address,address)": {
          "notice": "Record a token transfer."
        },
        "redemptionWeightOf(address,uint256[])": {
          "notice": "The cumulative weight the given token IDs have in redemptions compared to the `totalRedemptionWeight`."
        },
        "reservedTokenBeneficiaryOf(address,uint256)": {
          "notice": "The reserved token beneficiary for each tier. "
        },
        "tier(address,uint256)": {
          "notice": "Return the tier for the specified ID. "
        },
        "tierBalanceOf(address,address,uint256)": {
          "notice": "Each account's balance within a specific tier. _nft The NFT contract to which the tier balances belong. _owner The address to get a balance for.  _tierId The ID of the tier to get a balance within."
        },
        "tierIdOfToken(uint256)": {
          "notice": "The tier number of the provided token ID. "
        },
        "tierOfTokenId(address,uint256)": {
          "notice": "Return the tier for the specified token ID. "
        },
        "tierVotingUnitsOf(address,address,uint256)": {
          "notice": "The voting units for an account from its NFTs across all tiers. NFTs have a tier-specific preset number of voting units. "
        },
        "tiers(address,uint256,uint256)": {
          "notice": "Gets an array of all the active tiers. "
        },
        "tokenUriResolverOf(address)": {
          "notice": "Custom token URI resolver, supersedes base URI. _nft The NFT for which the token URI resolver applies."
        },
        "totalRedemptionWeight(address)": {
          "notice": "The cumulative weight that all token IDs have in redemptions."
        },
        "totalSupply(address)": {
          "notice": " The total supply of issued NFTs from all tiers."
        },
        "votingUnitsOf(address,address)": {
          "notice": "The voting units for an account from its NFTs across all tiers. NFTs have a tier-specific preset number of voting units. "
        }
      },
      "notice": "The contract that stores and manages the NFT's data.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "node_modules/@jbx-protocol/juice-721-delegate/contracts/JBTiered721DelegateStore.sol": "JBTiered721DelegateStore"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@jbx-protocol/=node_modules/@jbx-protocol/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":@paulrberg/=node_modules/@paulrberg/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":prb-math/=node_modules/prb-math/"
    ]
  },
  "sources": {
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/JBTiered721DelegateStore.sol": {
      "keccak256": "0x09ba8cbb0134b1d4ca342ecd268b3605764459b7ef1f7c9f80223a5228c2527c",
      "license": "MIT",
      "urls": [
        "bzz-raw://00d1a8d015b4a2df7dd10a0e6b18f74870c4b6ae561efaef78ea2a8180da0a70",
        "dweb:/ipfs/QmTsnWCi7wuXFUuyhn1MV3sYCfGv9aoknu8JxEN9AoBNr1"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/interfaces/IJBTiered721DelegateStore.sol": {
      "keccak256": "0xcf1b6e7936510e113ecfdf9ec19a53fd4bc76bbdd6fb45277b3f87dad6a80392",
      "license": "MIT",
      "urls": [
        "bzz-raw://3837762449cbb5582dd35cf87857c71fe49d5ee723d4860fc5ff5265415ea57e",
        "dweb:/ipfs/QmbN8ULJmgnfiD8tbKLrKE8KJDzd4xwqopSVq6DWHrMWiT"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/libraries/JBBitmap.sol": {
      "keccak256": "0x2e1ff90df6624e291b8b75261f438e4ab5c4ce737bc80994834b9e1b4897c0f3",
      "license": "MIT",
      "urls": [
        "bzz-raw://33bbe4fa1e86651c2b2b798a624cb48715cbe83e4b8d663ab609b73870f054b6",
        "dweb:/ipfs/QmY9RUUiSVQB39UT9VyLymSSYYze8B5iuc6a2rGQRMicdm"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/structs/JB721Tier.sol": {
      "keccak256": "0xbbe8975ee48958845da812af2e7bb6ab733bbb7c3e512f29804bf790cd8b2de7",
      "license": "MIT",
      "urls": [
        "bzz-raw://e87b6593e8341621c2fa1283296ca402e9671d1b421ce58bf4d906f196c2385f",
        "dweb:/ipfs/QmPv7thJmfj2qCTDW5FUsyauFAgovnwu8cCmZhfDmVC17z"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/structs/JB721TierParams.sol": {
      "keccak256": "0x8e4f755335fc5b78e5cd1390ee4209c0edbb63a17cd413fee2e2c64cadf15b56",
      "license": "MIT",
      "urls": [
        "bzz-raw://44348545c0affb4bb969fd92bdee79c93a777c02691c840f299c14ec2209b16a",
        "dweb:/ipfs/QmWfXobGC96SDnNgDLXGsb44HwzbL3tjTBB4DEk4t2Qtxz"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/structs/JBBitmapWord.sol": {
      "keccak256": "0x3cb3491c43e48a91763975191edbc4e5b6ea5a2c471ef61a5c002b9c5c51dc96",
      "license": "MIT",
      "urls": [
        "bzz-raw://ed499e21b19251e68aae594fe5e2d9087e3b2fce06d8f39b68271f5c10e871d8",
        "dweb:/ipfs/QmSndiy5j334hys8y3M8ccymkeheJmvQWYCccyU5BVPTQ9"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/structs/JBStored721Tier.sol": {
      "keccak256": "0xf3fd0ae5b87e4b527e80697750f4400f7850079a8f75bab89fbb54f78e2ab1f2",
      "license": "MIT",
      "urls": [
        "bzz-raw://5a605dfe816d77a7ec15f99960f142dd2b1b857822da85a655160d09d1f8bedb",
        "dweb:/ipfs/QmPTKJh5qtYd8SHwhwsnpWdXjkHGM7MvoJGrYJfUZ37fYZ"
      ]
    },
    "node_modules/@jbx-protocol/juice-721-delegate/contracts/structs/JBTiered721Flags.sol": {
      "keccak256": "0xe81a246492912a874aa6dd53a9df34ea8eceaf9b8eb7fdb673089f9d2c9ec08d",
      "license": "MIT",
      "urls": [
        "bzz-raw://70343f0d7873171295ad1195b31233c09a2e8ec81aa53da398f2d208cabe9418",
        "dweb:/ipfs/QmNhLf7FsLVYduT4Kgg3e9J1FYbgEqP8BuNRiRndw7vKv7"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBTokenUriResolver.sol": {
      "keccak256": "0xd267fd8ca7c21c2c71794acdb9a98314c33a35fc559e0bf0897a6686d196d174",
      "license": "MIT",
      "urls": [
        "bzz-raw://aa7053d4300ed1374f3f993e6e2163d0a05ee780e4e99eb007b55eabc93c724e",
        "dweb:/ipfs/QmYZAUn7VCwqpDWYZNCXLNYMRQpD334YgPRiGCfxQApzuT"
      ]
    }
  },
  "version": 1
}