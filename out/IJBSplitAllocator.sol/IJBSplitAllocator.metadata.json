{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "token",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "decimals",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "projectId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "group",
                "type": "uint256"
              },
              {
                "components": [
                  {
                    "internalType": "bool",
                    "name": "preferClaimed",
                    "type": "bool"
                  },
                  {
                    "internalType": "bool",
                    "name": "preferAddToBalance",
                    "type": "bool"
                  },
                  {
                    "internalType": "uint256",
                    "name": "percent",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "projectId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address payable",
                    "name": "beneficiary",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                  },
                  {
                    "internalType": "contract IJBSplitAllocator",
                    "name": "allocator",
                    "type": "address"
                  }
                ],
                "internalType": "struct JBSplit",
                "name": "split",
                "type": "tuple"
              }
            ],
            "internalType": "struct JBSplitAllocationData",
            "name": "_data",
            "type": "tuple"
          }
        ],
        "name": "allocate",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Adheres to: IERC165 for adequate interface integrationThe contract address should be set as an allocator in the adequate split",
      "kind": "dev",
      "methods": {
        "allocate((address,uint256,uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)))": {
          "details": "Critical business logic should be protected by an appropriate access control. The token and/or eth are optimistically transfered to the allocator for its logic.",
          "params": {
            "_data": "the data passed by the terminal, as a JBSplitAllocationData struct: address token; uint256 amount; uint256 decimals; uint256 projectId; uint256 group; JBSplit split;"
          }
        },
        "supportsInterface(bytes4)": {
          "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
        }
      },
      "title": "Split allocator",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "allocate((address,uint256,uint256,uint256,uint256,(bool,bool,uint256,uint256,address,uint256,address)))": {
          "notice": "This function is called by JBPaymentTerminal.distributePayoutOf(..), during the processing of the split including it"
        }
      },
      "notice": "Provide a way to process a single split with extra logic",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBSplitAllocator.sol": "IJBSplitAllocator"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@jbx-protocol/=node_modules/@jbx-protocol/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":@paulrberg/=node_modules/@paulrberg/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":prb-math/=node_modules/prb-math/"
    ]
  },
  "sources": {
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBSplitAllocator.sol": {
      "keccak256": "0x5efb6f51fc161f42ff58989386ad99028e4039a0ba897d66f358c3dfcf686105",
      "license": "MIT",
      "urls": [
        "bzz-raw://171df7cf5285170894d7d7d00ecb14271204b55d330fa65e1bf9ebfb21741c29",
        "dweb:/ipfs/QmXBmzjVVgGd1hZoStw2qoypJnqyWgYeMXMLyYS7f6Zonu"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBSplit.sol": {
      "keccak256": "0xc80a16606da8abf76d0f73abc38aee041e24f29342c1939018f70c286e89f105",
      "license": "MIT",
      "urls": [
        "bzz-raw://d257df1f322904fdbf34a0d28880cc96a1ba3905d19488d83156a7d3476d820f",
        "dweb:/ipfs/QmP6WFuoK6ePEQ2zxRnpu1kWDdFSUTGaEV57eZ4gs9FqC8"
      ]
    },
    "node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBSplitAllocationData.sol": {
      "keccak256": "0x39f5c41bd31d36774744698ac94484b6cab62d7038df2f29d947668959782e63",
      "license": "MIT",
      "urls": [
        "bzz-raw://cf81d025aa0f6f93bdcd0b863730f7c574de7c3c4a595ba88e342f46c4b724e4",
        "dweb:/ipfs/QmaQ1frbYciPVV1Qmsfmgts9fgbXKZLQ8jGf9XRikHSmci"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}